import { expect, test } from "vitest";
import { decompose } from "../src/decompose.mjs";

test("decompose '가나다'", () => {
  expect(decompose("가나다", "simple")).toEqual([
    "ㄱ",
    "ㅏ",
    "ㄴ",
    "ㅏ",
    "ㄷ",
    "ㅏ",
  ]);
});

test("decompose '뷁뛣겍", () => {
  expect(decompose("뷁뛣겍")).toEqual([
    {
      wordBeforeCharIndex: "",
      char: "뷁",
      charIndex: 0,
      decomposedSingle: ["ㅂ", "ㅜ", "ㅔ", "ㄹ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 0,
      decomposedAtIndex: "ㅂ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "",
      char: "뷁",
      charIndex: 0,
      decomposedSingle: ["ㅂ", "ㅜ", "ㅔ", "ㄹ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 1,
      decomposedAtIndex: "ㅜ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "",
      char: "뷁",
      charIndex: 0,
      decomposedSingle: ["ㅂ", "ㅜ", "ㅔ", "ㄹ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 2,
      decomposedAtIndex: "ㅔ",
      decomposedIndex: 2,
    },
    {
      wordBeforeCharIndex: "",
      char: "뷁",
      charIndex: 0,
      decomposedSingle: ["ㅂ", "ㅜ", "ㅔ", "ㄹ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 3,
      decomposedAtIndex: "ㄹ",
      decomposedIndex: 3,
    },
    {
      wordBeforeCharIndex: "",
      char: "뷁",
      charIndex: 0,
      decomposedSingle: ["ㅂ", "ㅜ", "ㅔ", "ㄹ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 4,
      decomposedAtIndex: "ㄱ",
      decomposedIndex: 4,
    },
    {
      wordBeforeCharIndex: "뷁",
      char: "뛣",
      charIndex: 1,
      decomposedSingle: ["ㄸ", "ㅜ", "ㅔ", "ㄹ", "ㅎ"],
      currentWord: "뷁뛣겍",
      flatIndex: 5,
      decomposedAtIndex: "ㄸ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "뷁",
      char: "뛣",
      charIndex: 1,
      decomposedSingle: ["ㄸ", "ㅜ", "ㅔ", "ㄹ", "ㅎ"],
      currentWord: "뷁뛣겍",
      flatIndex: 6,
      decomposedAtIndex: "ㅜ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "뷁",
      char: "뛣",
      charIndex: 1,
      decomposedSingle: ["ㄸ", "ㅜ", "ㅔ", "ㄹ", "ㅎ"],
      currentWord: "뷁뛣겍",
      flatIndex: 7,
      decomposedAtIndex: "ㅔ",
      decomposedIndex: 2,
    },
    {
      wordBeforeCharIndex: "뷁",
      char: "뛣",
      charIndex: 1,
      decomposedSingle: ["ㄸ", "ㅜ", "ㅔ", "ㄹ", "ㅎ"],
      currentWord: "뷁뛣겍",
      flatIndex: 8,
      decomposedAtIndex: "ㄹ",
      decomposedIndex: 3,
    },
    {
      wordBeforeCharIndex: "뷁",
      char: "뛣",
      charIndex: 1,
      decomposedSingle: ["ㄸ", "ㅜ", "ㅔ", "ㄹ", "ㅎ"],
      currentWord: "뷁뛣겍",
      flatIndex: 9,
      decomposedAtIndex: "ㅎ",
      decomposedIndex: 4,
    },
    {
      wordBeforeCharIndex: "뷁뛣",
      char: "겍",
      charIndex: 2,
      decomposedSingle: ["ㄱ", "ㅔ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 10,
      decomposedAtIndex: "ㄱ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "뷁뛣",
      char: "겍",
      charIndex: 2,
      decomposedSingle: ["ㄱ", "ㅔ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 11,
      decomposedAtIndex: "ㅔ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "뷁뛣",
      char: "겍",
      charIndex: 2,
      decomposedSingle: ["ㄱ", "ㅔ", "ㄱ"],
      currentWord: "뷁뛣겍",
      flatIndex: 12,
      decomposedAtIndex: "ㄱ",
      decomposedIndex: 2,
    },
  ]);
});

test("decompose '윾ab랄ㄹ", () => {
  expect(decompose("윾ab랄ㄹ")).toEqual([
    {
      wordBeforeCharIndex: "",
      char: "윾",
      charIndex: 0,
      decomposedSingle: ["ㅇ", "ㅡ", "ㄲ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 0,
      decomposedAtIndex: "ㅇ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "",
      char: "윾",
      charIndex: 0,
      decomposedSingle: ["ㅇ", "ㅡ", "ㄲ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 1,
      decomposedAtIndex: "ㅡ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "",
      char: "윾",
      charIndex: 0,
      decomposedSingle: ["ㅇ", "ㅡ", "ㄲ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 2,
      decomposedAtIndex: "ㄲ",
      decomposedIndex: 2,
    },
    {
      wordBeforeCharIndex: "윾",
      char: "a",
      charIndex: 1,
      decomposedSingle: ["a"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 3,
      decomposedAtIndex: "a",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "윾a",
      char: "b",
      charIndex: 2,
      decomposedSingle: ["b"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 4,
      decomposedAtIndex: "b",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "윾ab",
      char: "랄",
      charIndex: 3,
      decomposedSingle: ["ㄹ", "ㅏ", "ㄹ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 5,
      decomposedAtIndex: "ㄹ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "윾ab",
      char: "랄",
      charIndex: 3,
      decomposedSingle: ["ㄹ", "ㅏ", "ㄹ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 6,
      decomposedAtIndex: "ㅏ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "윾ab",
      char: "랄",
      charIndex: 3,
      decomposedSingle: ["ㄹ", "ㅏ", "ㄹ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 7,
      decomposedAtIndex: "ㄹ",
      decomposedIndex: 2,
    },
    {
      wordBeforeCharIndex: "윾ab랄",
      char: "ㄹ",
      charIndex: 4,
      decomposedSingle: ["ㄹ"],
      currentWord: "윾ab랄ㄹ",
      flatIndex: 8,
      decomposedAtIndex: "ㄹ",
      decomposedIndex: 0,
    },
  ]);
});

test("decompose 'ㅘㅙㅚ", () => {
  expect(decompose("ㅘㅙㅚ")).toEqual([
    {
      wordBeforeCharIndex: "",
      char: "ㅘ",
      charIndex: 0,
      decomposedSingle: ["ㅗ", "ㅏ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 0,
      decomposedAtIndex: "ㅗ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "",
      char: "ㅘ",
      charIndex: 0,
      decomposedSingle: ["ㅗ", "ㅏ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 1,
      decomposedAtIndex: "ㅏ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "ㅘ",
      char: "ㅙ",
      charIndex: 1,
      decomposedSingle: ["ㅗ", "ㅐ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 2,
      decomposedAtIndex: "ㅗ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "ㅘ",
      char: "ㅙ",
      charIndex: 1,
      decomposedSingle: ["ㅗ", "ㅐ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 3,
      decomposedAtIndex: "ㅐ",
      decomposedIndex: 1,
    },
    {
      wordBeforeCharIndex: "ㅘㅙ",
      char: "ㅚ",
      charIndex: 2,
      decomposedSingle: ["ㅗ", "ㅣ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 4,
      decomposedAtIndex: "ㅗ",
      decomposedIndex: 0,
    },
    {
      wordBeforeCharIndex: "ㅘㅙ",
      char: "ㅚ",
      charIndex: 2,
      decomposedSingle: ["ㅗ", "ㅣ"],
      currentWord: "ㅘㅙㅚ",
      flatIndex: 5,
      decomposedAtIndex: "ㅣ",
      decomposedIndex: 1,
    },
  ]);
});
